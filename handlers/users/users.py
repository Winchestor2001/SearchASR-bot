from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery
from peewee import fn

from keyboards.default.start import main_menu_kb
from states.user_states import ShopSearch
from database.connections import *

from loader import bot
from utils.validators import shop_username_validate

router = Router()


@router.message(CommandStart())
async def start_command(message: Message, state: FSMContext):
    await state.clear()
    user_id, full_name, username = (
        message.from_user.id,
        message.from_user.first_name,
        message.from_user.username,
    )
    await add_user(user_id=user_id, full_name=full_name, username=username)
    text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –Ω–∞—à—É –≥—Ä—É–ø–ø—É? –¢–∞–º –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –ø–æ—Å—Ç—ã –æ –ø—Ä–æ–¥–∞–≤—Ü–∞—Ö –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –æ—Å–Ω–æ–≤–µ ‚Äî @remove_scamming\n\n"
        "/whitelist - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ñ–º–∏ –∫–Ω–æ–ø–∫—É ¬´üîç –ù–∞–π—Ç–∏ –º–∞–≥–∞–∑–∏–Ω¬ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π –±–æ—Ç—É —Å—Å—ã–ª–∫—É –∏–ª–∏ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> –∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤ –Ω–∞—à–µ–π –±–∞–∑–µ"
    )
    await message.answer(text, reply_markup=main_menu_kb)


@router.message(Command("whitelist"))
async def list_command(message: Message, state: FSMContext):
    await state.clear()
    trusted_seller = Sellers.select().order_by(Sellers.id.desc()).first()

    response = (
        "<b>–ú–û–ñ–ù–û –î–û–í–ï–†–Ø–¢–¨</b> ‚úÖ\n\n"
        f"{trusted_seller.text if trusted_seller else '–ü—É—Å—Ç–æ'}"
    )

    await message.answer(response)


@router.message(F.text == "üîç –ù–∞–π—Ç–∏ –º–∞–≥–∞–∑–∏–Ω")
async def ask_shop_name(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> –º–∞–≥–∞–∑–∏–Ω–∞ –∏–ª–∏ –µ–≥–æ @username:")
    await state.set_state(ShopSearch.name)


@router.message(ShopSearch.name)
async def search_shop(message: Message, state: FSMContext):
    query = await shop_username_validate(message.text.strip().lower())

    # Search by username or name
    shop = next(
        (s for s in Shops.select() if query in s.name.lower() or s.username == query),
        None
    )
    if shop:
        status_text = {
            "trusted": "‚úÖ <b>–ú–∞–≥–∞–∑–∏–Ω—É –ú–û–ñ–ù–û –¥–æ–≤–µ—Ä—è—Ç—å!</b>",
            "scam": "‚ùå <b>–≠–¢–û –°–ö–ê–ú! –ù–ï–õ–¨–ó–Ø –¥–æ–≤–µ—Ä—è—Ç—å!</b>"
        }.get(shop.status, "–°—Ç–∞—Ç—É—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω.")
        response = (
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {shop.name}\n"
            f"Username: {shop.username}\n"
            f"{status_text}"
        )
    else:
        response = "‚ö†Ô∏è –ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
        await state.set_state(ShopSearch.name)

    await message.answer(response)
