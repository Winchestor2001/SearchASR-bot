from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from database.connections import *
from states.user_states import *
from loader import bot

from filters.is_admin import IsAdmin

router = Router()


@router.message(Command(commands=["admin"]), IsAdmin())
async def intro_admin(message: Message, state: FSMContext):
    await message.answer("Hello")


@router.message(Command("addseller"), IsAdmin())
async def add_seller_cmd(message: Message, state: FSMContext):
    text = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤"
    await message.answer(text)
    await state.set_state(AddSeller.text)


@router.message(AddSeller.text, IsAdmin())
async def save_db(message: Message, state: FSMContext):
    text = message.text
    await delete_all_seller()
    await add_seller(text=text)
    await message.answer("–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ")
    await state.clear()


@router.message(Command("update_seller"))
async def update_seller(message: Message, state: FSMContext):
    sellers = await get_seller()
    text = f"–≠—Ç–æ –≤–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤:\n\n<code>{sellers[0]['text']}</code>\n\n –ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤"
    await message.answer(text)
    await state.set_state(AddSeller.text)



#     parts = message.text.strip().split()

#     if len(parts) < 2:
#         return await message.answer("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä:\n<code>/addseller @username</code>")

#     raw_username = parts[1].lower()
#     icon = parts[2] if len(parts) >= 3 else ""
#     status = "trusted"


#     username = raw_username + icon

#     try:
#         seller = add_seller(username=username, status=status)
#         await message.answer(f"‚úÖ –ü—Ä–æ–¥–∞–≤–µ—Ü {seller.username} –¥–æ–±–∞–≤–ª–µ–Ω.", disable_web_page_preview=True)
#     except Exception as e:
#         await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {e}")


# @router.message(Command("delseller"), IsAdmin())
# async def delete_seller_cmd(message: Message):

#     parts = message.text.strip().split()
#     if len(parts) < 2:
#         return await message.answer("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä:\n<code>/delseller @username</code>")

#     raw_username = " ".join(parts[1:]).lower()

#     deleted = delete_seller_by_index(raw_username)
#     if deleted:
#         await message.answer(f"üóë –ü—Ä–æ–¥–∞–≤–µ—Ü {raw_username} —É–¥–∞–ª—ë–Ω.")
#     else:
#         await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–¥–∞–≤–µ—Ü {raw_username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@router.message(Command("addshop"), IsAdmin())
async def add_shop_cmd(message: Message):
    parts = message.text.strip().split()
    
    if len(parts) < 4:
        return await message.answer(
            "‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä:\n<code>/addshop @shopusername status(trusted/scam) Shop Name</code>"
        )

    _, raw_username, status, *name_parts = parts
    username = raw_username.strip()
    status = status.lower()
    name = " ".join(name_parts).strip()

    if not name:
        return await message.answer("‚ùóÔ∏è–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.")

    if status not in ["trusted", "scam"]:
        return await message.answer("‚ùóÔ∏è–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å <code>trusted</code> –∏–ª–∏ <code>scam</code>")

    try:
        shop = add_shop(username=username.lower(), name=name, status=status)
        await message.answer(
            f"‚úÖ –ú–∞–≥–∞–∑–∏–Ω <b>{shop.name}</b> ({shop.username}) –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ <b>{status.upper()}</b>."
        , disable_web_page_preview=True)
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞: {e}")


@router.message(Command("delshop"), IsAdmin())
async def del_shop_cmd(message: Message):
    parts = message.text.strip().split()
    if len(parts) != 2:
        return await message.answer("‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä:\n<code>/delshop @username</code>")

    _, username = parts

    success = delete_shop_by_index(username=username.lower())
    if success:
        await message.answer(f"‚úÖ –ú–∞–≥–∞–∑–∏–Ω {username} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞")
    else:
        await message.answer(f"‚ùå –ú–∞–≥–∞–∑–∏–Ω {username} —Å–æ username {username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")


# stats
@router.message(Command("stats"), IsAdmin())
async def stats_handler(message: Message):
    total_users = Users.select().count()
    total_shops = Shops.select().count()
    total_sellers = Sellers.select().count()

    trusted_shops = Shops.select().where(Shops.status == "trusted").count()
    scam_shops = Shops.select().where(Shops.status == "scam").count()

    trusted_sellers = Sellers.select().count()

    stats_text = (
        f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: <b>{total_users}</b>\n\n"
        f"üè™ –ú–∞–≥–∞–∑–∏–Ω—ã: <b>{total_shops}</b>\n"
        f"‚úÖ –î–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ: <b>{trusted_shops}</b>\n"
        f"‚ùå –°–∫–∞–º: <b>{scam_shops}</b>\n\n"
        f"üì¶ –ü—Ä–æ–¥–∞–≤—Ü—ã: <b>{total_sellers}</b>\n"
        f"‚úÖ –î–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ: <b>{trusted_sellers}</b>\n"
    )

    await message.answer(stats_text, disable_web_page_preview=True)


@router.message(Command("allshops"), IsAdmin())
async def all_shops_cmd(message: Message):
    scam_shops = Shops.select().where(Shops.status == "scam").order_by(Shops.index)
    trusted_shops = Shops.select().where(Shops.status == "trusted").order_by(Shops.index)

    text = "<b>üì¶ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤</b>\n\n"

    if scam_shops:
        text += "‚ùå <b>–°–ö–ê–ú</b>\n"
        for shop in scam_shops:
            text += f"{shop.index}. {shop.username} - {shop.name}\n"
        text += "\n"
    else:
        text += "‚ùå <b>–°–ö–ê–ú</b>\n–ù–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤\n\n"

    if trusted_shops:
        text += "‚úÖ <b>–î–û–í–ï–†–ï–ù–ù–´–ï</b>\n"
        for shop in trusted_shops:
            text += f"{shop.index}. {shop.username} - {shop.name}\n"
    else:
        text += "‚úÖ <b>–î–û–í–ï–†–ï–ù–ù–´–ï</b>\n–ù–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤\n"

    await message.answer(text, disable_web_page_preview=True)


@router.message(Command("mailing"), IsAdmin())
async def start_mailing(message: Message, state: FSMContext):
    await state.set_state(Mailing.waiting_for_content)
    await message.answer("üì® –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∏ —Ç.–¥.), –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")


@router.message(Mailing.waiting_for_content, IsAdmin())
async def process_mailing(message: Message, state: FSMContext):
    await state.clear()

    users = Users.select()
    success, fail = 0, 0
    btn = message.reply_markup

    for user in users:
        try:
            await bot.copy_message(
                chat_id=user.user_id,
                from_chat_id=message.chat.id,
                message_id=message.message_id,
                reply_markup=btn
            )
            success += 1
        except Exception:
            fail += 1

    await message.answer(f"üì¨ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n‚ùå –û—à–∏–±–∫–∞: {fail}")