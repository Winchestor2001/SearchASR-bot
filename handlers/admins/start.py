from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from database.connections import *
from keyboards.default.start import ready_btn, remove_btn
from states.user_states import *
from loader import bot

from filters.is_admin import IsAdmin
from utils.validators import send_long_text, send_long_text_2

router = Router()


@router.message(Command(commands=["admin"]), IsAdmin())
async def intro_admin(message: Message, state: FSMContext):
    await message.answer("Hello")
    
    
@router.message(Command("allshops"), IsAdmin())
async def all_shops_cmd(message: Message, state: FSMContext):
    await state.clear()
    scam_shops = Shops.select().where(Shops.status == "scam").order_by(Shops.id)
    trusted_shops = Shops.select().where(Shops.status == "trusted").order_by(Shops.id)

    text = "<b>üì¶ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤</b>\n\n"

    if scam_shops:
        text += "‚ùå <b>–°–ö–ê–ú</b>\n"
        for shop in scam_shops:
            text += f"{shop.username} - {shop.name}\n"
        text += "\n"
    else:
        text += "‚ùå <b>–°–ö–ê–ú</b>\n–ù–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤\n\n"

    if trusted_shops:
        text += "‚úÖ <b>–î–û–í–ï–†–ï–ù–ù–´–ï</b>\n"
        for shop in trusted_shops:
            text += f"{shop.username} - {shop.name}\n"
    else:
        text += "‚úÖ <b>–î–û–í–ï–†–ï–ù–ù–´–ï</b>\n–ù–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤\n"

    await send_long_text(message, text)


@router.message(Command("update_seller"))
async def update_seller(message: Message, state: FSMContext):
    await state.clear()
    sellers = await get_seller()

    if not sellers:
        await message.answer("<b>‚ùóÔ∏è–°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –ø—É—Å—Ç. –ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤.</b>")
    else:
        text = (
            f"–≠—Ç–æ –≤–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤:\n\n"
            f"{sellers[0]['text']}\n\n"
            f"–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤"
        )
        btn = await ready_btn()
        await send_long_text_2(message, text, btn)
    await state.set_state(AddSeller.text)


@router.message(AddSeller.text, F.text != "‚úÖ –ì–æ—Ç–æ–≤–æ", IsAdmin())
async def get_shop_context(message: Message, state: FSMContext):
    new_lines = message.text
    data = await state.get_data()
    current_lines = data.get("shop_lines", "")

    current_lines += new_lines
    await state.update_data(shop_lines=current_lines)
    await message.answer("üì• –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.")


@router.message(AddSeller.text, F.text == "‚úÖ –ì–æ—Ç–æ–≤–æ", IsAdmin())
async def save_db(message: Message, state: FSMContext):
    text = (await state.get_data())["shop_lines"]
    await delete_all_seller()
    await add_seller(text=text)
    await message.answer("–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ", reply_markup=remove_btn)
    await state.clear()


@router.message(Command("update_shop_trusted"), IsAdmin())
async def add_shop_cmd(message: Message, state: FSMContext):
    await state.clear()
    trusted_shops = Shops.select().where(Shops.status == "trusted").order_by(Shops.id)

    if trusted_shops.exists():
        current_list = "\n".join(
            [f"{shop.username} - {shop.name}" for shop in trusted_shops]
        )
    else:
        current_list = "–ù–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤ –≤ —Å–ø–∏—Å–∫–µ."

    text = (
        "<b>–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∫–∞–∫:</b>\n\n"
        "<code>@username - name</code>\n\n"
        "<b>–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤:</b>\n\n"
        f"{current_list}"
    )
    btn = await ready_btn()
    await send_long_text(message, text, btn)
    await state.set_state(AddShop.text)


@router.message(AddShop.text, F.text != "‚úÖ –ì–æ—Ç–æ–≤–æ", IsAdmin())
async def get_shop_context(message: Message, state: FSMContext):
    new_lines = message.text.strip().splitlines()
    data = await state.get_data()
    current_lines = data.get("shop_lines", [])

    # Append new lines to existing state
    current_lines.extend(new_lines)
    await state.update_data(shop_lines=current_lines)
    await message.answer("üì• –°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.")


@router.message(AddShop.text, F.text == "‚úÖ –ì–æ—Ç–æ–≤–æ", IsAdmin())
async def process_shop_list_on_done(message: Message, state: FSMContext):
    data = await state.get_data()
    lines = data.get("shop_lines", [])
    added, skipped = [], []

    delete_shop_by_status("trusted")

    for line in lines:
        if "-" not in line:
            skipped.append((line, "–ù–µ—Ç —Å–∏–º–≤–æ–ª–∞ '-'"))
            continue

        try:
            raw_username, raw_name = line.split("-", maxsplit=1)
            username = raw_username.strip().lower()
            name = raw_name.strip()

            if not username.startswith("@") or not name:
                skipped.append((line, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏"))
                continue

            shop = add_shop(username=username, name=name, status="trusted")
            added.append(shop)
        except Exception as e:
            skipped.append((line, f"–û—à–∏–±–∫–∞: {e}"))

    await state.clear()

    response = ""
    if added:
        response += "‚úÖ <b>–î–æ–±–∞–≤–ª–µ–Ω—ã –º–∞–≥–∞–∑–∏–Ω—ã:</b>\n"
        for shop in added:
            response += f"‚Ä¢ <b>{shop.name}</b> ({shop.username})\n"

    if skipped:
        response += "\n‚ö†Ô∏è <b>–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏:</b>\n"
        for line, reason in skipped:
            response += f"‚Ä¢ <code>{line}</code> ‚Äî {reason}\n"

    await send_long_text(message, response.strip(), btn=remove_btn)


@router.message(Command("update_shop_scam"), IsAdmin())
async def add_shop_cmd(message: Message, state: FSMContext):
    await state.clear()
    scam_shops = Shops.select().where(Shops.status == "scam").order_by(Shops.id)

    if scam_shops.exists():
        current_list = "\n".join(
            [f"{shop.username} - {shop.name}" for shop in scam_shops]
        )
    else:
        current_list = "–ù–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤ –≤ —Å–ø–∏—Å–∫–µ."

    text = (
        "<b>–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∫–∞–∫:</b>\n\n"
        "<code>@username - name</code>\n\n"
        "<b>–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤:</b>\n\n"
        f"{current_list}"
    )
    btn = await ready_btn()
    await send_long_text(message, text, btn=btn)
    await state.set_state(AddShop.scam_text)


@router.message(AddShop.scam_text, F.text != "‚úÖ –ì–æ—Ç–æ–≤–æ", IsAdmin())
async def get_shop_context(message: Message, state: FSMContext):
    new_lines = message.text.strip().splitlines()
    data = await state.get_data()
    current_lines = data.get("shop_lines", [])

    # Append new lines to existing state
    current_lines.extend(new_lines)
    await state.update_data(shop_lines=current_lines)
    await message.answer("üì• –°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.")


@router.message(AddShop.scam_text, IsAdmin())
async def get_shop_context(message: Message, state: FSMContext):
    data = await state.get_data()
    lines = data.get("shop_lines", [])
    added, skipped = [], []

    delete_shop_by_status("scam")

    for line in lines:
        if "-" not in line:
            skipped.append((line, "–ù–µ—Ç —Å–∏–º–≤–æ–ª–∞ '-'"))
            continue

        try:
            raw_username, raw_name = line.split("-", maxsplit=1)
            username = raw_username.strip().lower()
            name = raw_name.strip()

            if not username.startswith("@") or not name:
                skipped.append((line, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏"))
                continue

            shop = add_shop(username=username, name=name, status="scam")
            added.append(shop)
        except Exception as e:
            skipped.append((line, f"–û—à–∏–±–∫–∞: {e}"))

    await state.clear()

    response = ""
    if added:
        response += "‚úÖ <b>–î–æ–±–∞–≤–ª–µ–Ω—ã –º–∞–≥–∞–∑–∏–Ω—ã:</b>\n"
        for shop in added:
            response += f"‚Ä¢ <b>{shop.name}</b> ({shop.username})\n"

    if skipped:
        response += "\n‚ö†Ô∏è <b>–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏:</b>\n"
        for line, reason in skipped:
            response += f"‚Ä¢ <code>{line}</code> ‚Äî {reason}\n"

    await send_long_text(message, response.strip(), btn=remove_btn)


# stats
@router.message(Command("stats"), IsAdmin())
async def stats_handler(message: Message):
    total_users = Users.select().count()
    total_shops = Shops.select().count()
    total_sellers = Sellers.select().count()

    trusted_shops = Shops.select().where(Shops.status == "trusted").count()
    scam_shops = Shops.select().where(Shops.status == "scam").count()

    trusted_sellers = Sellers.select().count()

    stats_text = (
        f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: <b>{total_users}</b>\n\n"
        f"üè™ –ú–∞–≥–∞–∑–∏–Ω—ã: <b>{total_shops}</b>\n"
        f"‚úÖ –î–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ: <b>{trusted_shops}</b>\n"
        f"‚ùå –°–∫–∞–º: <b>{scam_shops}</b>\n\n"
        f"üì¶ –ü—Ä–æ–¥–∞–≤—Ü—ã: <b>{total_sellers}</b>\n"
        f"‚úÖ –î–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ: <b>{trusted_sellers}</b>\n"
    )

    await message.answer(stats_text, disable_web_page_preview=True)


@router.message(Command("mailing"), IsAdmin())
async def start_mailing(message: Message, state: FSMContext):
    await state.set_state(Mailing.waiting_for_content)
    await message.answer("üì® –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∏ —Ç.–¥.), –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")


@router.message(Mailing.waiting_for_content, IsAdmin())
async def process_mailing(message: Message, state: FSMContext):
    await state.clear()

    users = Users.select()
    success, fail = 0, 0
    btn = message.reply_markup

    for user in users:
        try:
            await bot.copy_message(
                chat_id=user.user_id,
                from_chat_id=message.chat.id,
                message_id=message.message_id,
                reply_markup=btn
            )
            success += 1
        except Exception:
            fail += 1

    await message.answer(f"üì¨ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n‚ùå –û—à–∏–±–∫–∞: {fail}")